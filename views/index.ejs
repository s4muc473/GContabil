<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GContabil</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            min-height: 100vh;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #111;
            padding: 20px;
        }

        .parent-main {
            background-color: #fff;
            padding: 30px;
            border-radius: 16px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 24px;
            width: 100%;
            max-width: 360px;
        }

        .div-logo h1 {
            font-size: 2rem;
            font-weight: 600;
            letter-spacing: 1px;
            color: #111;
        }

        .div-logo strong {
            color: #000;
        }

        .container-login {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .container-login input,
        .container-login button {
            padding: 12px 14px;
            border-radius: 8px;
            font-size: 1rem;
        }

        .container-login input {
            border: 1px solid #ccc;
            background-color: #fff;
            color: #000;
            outline: none;
        }

        .container-login button {
            background-color: #000;
            color: #fff;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .container-login button:hover {
            background-color: #333;
        }

        .container-main {
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
            display: none;
            flex-direction: column;
            gap: 24px;
            padding: 20px;
        }

        .container-main .div-logo {
            text-align: center;
        }


        .balancos {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            justify-content: space-between;
        }

        .balanco {
            flex: 1 1 30%;
            min-width: 250px;
            background-color: #fff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
            text-align: center;
            transition: transform 0.2s ease;
        }

        .balanco:hover {
            transform: translateY(-5px);
        }

        .balanco h3 {
            font-size: 1rem;
            margin-bottom: 10px;
            color: #555;
        }

        .balanco p {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .positivo p {
            color: #27ae60;
        }

        .negativo p {
            color: #e74c3c;
        }

        .total p {
            color: #3498db;
        }

        .load_movimentos {
            width: 100%;
            background-color: #fff;
            height: 300px;
            overflow-y: auto;
            border-radius: 10px;
            padding: 16px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
            position: relative;
        }

        .btn-transacao {
            position: sticky;
            bottom: 10px;
            right: 10px;
            margin-top: 10px;
            margin-left: auto;
            display: block;
            background-color: #000;
            color: #fff;
            font-size: 1rem;
            font-weight: bold;
            padding: 10px 20px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
            transition: background 0.3s ease;
        }

        .btn-transacao:hover {
            background-color: #333;
        }

        /* Fundo do modal */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        /* Conteúdo do modal */
        .modal {
            background: #000;
            color: #fff;
            padding: 2rem;
            border-radius: 12px;
            width: 400px;
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.1);
        }

        .modal h2 {
            margin-top: 0;
            font-size: 1.5rem;
            border-bottom: 1px solid #fff;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .modal label {
            display: block;
            margin-top: 1rem;
            font-weight: bold;
        }

        .modal select,
        .modal input {
            width: 100%;
            padding: 0.6rem;
            margin-top: 0.3rem;
            background: #1a1a1a;
            border: 1px solid #fff;
            border-radius: 6px;
            color: #fff;
            font-size: 1rem;
        }

        .modal button {
            margin-top: 1.5rem;
            width: 100%;
            padding: 0.8rem;
            background: #fff;
            color: #000;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            font-weight: bold;
            transition: 0.2s;
        }

        .modal button:hover {
            background: #e1e1e1;
        }

        .tabela-transacoes {
            display: flex;
            flex-direction: column;
            width: 100%;
            max-width: 800px;
            margin: 2rem auto;
            border: 1px solid #ccc;
            font-family: 'Segoe UI', sans-serif;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }

        .transacao-linha {
            display: grid;
            grid-template-columns: 0.5fr 2fr 0.5fr 0.5fr 0.5fr auto;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #ddd;
            background-color: #fff;
            transition: background-color 0.3s ease;
        }

        .transacao-linha:nth-child(even) {
            background-color: #f9f9f9;
        }

        .transacao-linha:hover {
            background-color: #f1f1f1;
        }

        .transacao-linha>div {
            padding: 8px 10px;
            border-right: 1px solid #ddd;
            font-size: 0.95rem;
            color: #000;
        }

        .transacao-linha>div:last-child {
            border-right: none;
            text-align: right;
            font-weight: bold;
        }

        .entrada {
            color: green;
        }

        .saida {
            color: red;
        }

        .btn-deletar {
            background-color: #ff4d4f;
            color: white;
            border: none;
            padding: 6px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.85rem;
            transition: background-color 0.2s ease;
            margin-right: 10px;
        }

        .btn-deletar:hover {
            background-color: #e60000;
        }




        @media (max-width: 768px) {
            .balancos {
                flex-direction: column;
                align-items: stretch;
            }

            .balanco {
                flex: 1 1 100%;
            }

            .container-main {
                padding: 10px;
            }
        }
    </style>
</head>

<body>
    <div class="parent-main">
        <div class="div-logo">
            <h1><strong>G</strong>Contabil</h1>
        </div>

        <div class="container-login">
            <input type="password" placeholder="Senha" id="input-password">
            <button id="btnLogin">Entrar</button>
        </div>
    </div>

    <div class="container-main">
        <div class="div-logo">
            <h1><strong>G</strong>Contabil</h1>
        </div>

        <div class="balancos">
            <div id="balance_1" class="balanco positivo">
                <h3>Entradas</h3>
                <p id="div_total_entries">R$ 0,00</p>
            </div>
            <div id="balance_2" class="balanco negativo">
                <h3>Saídas</h3>
                <p id="div_total_exits">R$ 0,00</p>
            </div>
            <div id="balance_3" class="balanco total">
                <h3>Saldo Total</h3>
                <p id="div_balance">R$ 0,00</p>
            </div>
        </div>

        <div class="load_movimentos">
            <button class="btn-transacao" onclick="novaTransacao()">Nova Transação</button>
            <div class="movs">
                <!-- CONTEUDO -->
            </div>
        </div>

        <div id="transacaoModal" class="modal-overlay">
            <div class="modal" style="position: relative;">
                <!-- Botão de fechar no canto da modal (bloco branco) -->
                <button onclick="fecharModal()" style="position: absolute; float: right; width: 10%; top: 5px; left: 30px; background: transparent; border: none; font-size: 18px; cursor: pointer; color:#e60000;">✕</button>
        
                <h2>Nova Transação</h2>
        
                <label for="tipo">Tipo de Transação</label>
                <select id="tipo">
                    <option value="entrada">Entrada</option>
                    <option value="saida">Saída</option>
                </select>
        
                <label for="motivo">Motivo</label>
                <input type="text" id="motivo" placeholder="Ex: Compra, Salário...">
        
                <!-- <label for="descricao">Descrição</label>
                <input type="text" id="descricao" placeholder="Detalhes da transação"> -->
        
                <label for="valor">Valor (R$)</label>
                <input type="number" id="valor" placeholder="Ex: 150.00" step="0.01" min="0">
        
                <button onclick="concluirTransacao()">Concluir Transação</button>
        
                <script>
                    function fecharModal() {
                        const modal = document.getElementById('transacaoModal');
                        modal.style.display = 'none';
                    }
                </script>
            </div>
        </div>        

    </div>

    <script>
        // const url = "http://localhost:3000/api";
        const url = "https://g-contabil.vercel.app/api"
        localStorage.test = 0

        document.getElementById('btnLogin').addEventListener("click", async function () {
            const password = document.getElementById('input-password');


            const connection = await fetch(`${url}/auth/${password.value}`)
            const dados = await connection.json();

            if (dados.status == 1) {
                localStorage.test = 1;
                document.querySelector('.container-main').style.display = "flex";
                document.querySelector('.parent-main').style.display = "none";
            } else {
                alert('Por favor, insira a senha correta!');
            }
        });

        function novaTransacao() {
            document.getElementById('transacaoModal').style.display = 'flex';
        }

        async function concluirTransacao() {
            const tipo = document.getElementById('tipo').value;
            const cause = document.getElementById('motivo').value;
            const value = document.getElementById('valor').value;

            let response;

            if (tipo == "entrada") {
                response = await fetch(`${url}/entrie`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ cause, type: "Entrada", value, observation: "inative" })
                });

            } else if (tipo == "saida") {
                response = await fetch(`${url}/exit`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ cause, type: "Saída", value, observation: "inative" })
                });
            }

            if (response.ok) {
                const dados = await response.json();
                console.log(dados);

                await pushDates();
                await listagem();
            }

            // Fecha o modal
            document.getElementById('transacaoModal').style.display = 'none';
        }


        function geraTransacao({ tipo, motivo, data, valor, id }) {
            const container = document.querySelector('.movs');

            const linha = document.createElement('div');
            linha.classList.add('transacao-linha');


            const tipoDiv = document.createElement('div');
            tipoDiv.textContent = tipo.charAt(0).toUpperCase() + tipo.slice(1);
            tipoDiv.classList.add(tipo);

            const motivoDiv = document.createElement('div');
            motivoDiv.textContent = motivo;

            const valorDiv = document.createElement('div');
            valorDiv.textContent = `R$ ${parseFloat(valor).toFixed(2)}`;
            valorDiv.classList.add(tipo);

            const dataDiv = document.createElement('div');
            const dataFormatada = new Date(data).toLocaleDateString('pt-BR');
            dataDiv.textContent = dataFormatada;

            const botaoExcluir = document.createElement('button');
            botaoExcluir.textContent = 'Excluir';
            botaoExcluir.classList.add('btn-deletar');

            linha.dataset.id = id;
            linha.dataset.valor = valor;
            // Ação de excluir linha
            botaoExcluir.addEventListener('click', async () => {
                const idTransacao = linha.dataset.id;
                const valorTransacao = linha.dataset.valor;

                if (tipo == "Entrada") {
                    const connection = await fetch(`${url}/entrie/delete/${idTransacao}/${valorTransacao}`);
                } else if (tipo == "Saída") {
                    const connection = await fetch(`${url}/exit/delete/${idTransacao}/${valorTransacao}`);
                }

                await pushDates();
                linha.remove();
            });
            const botaoDiv = document.createElement('div');
            botaoDiv.appendChild(botaoExcluir);

            linha.appendChild(tipoDiv);
            linha.appendChild(motivoDiv);
            linha.appendChild(valorDiv);
            linha.appendChild(dataDiv);
            linha.appendChild(botaoDiv);

            container.insertBefore(linha, container.firstChild);
        }

        async function listagem() {
            const container = document.querySelector('.movs');
            container.innerHTML = "";
            const entriesConnection = await fetch(`${url}/entrie`);
            const entries = await entriesConnection.json();

            const exitsConnection = await fetch(`${url}/exit`);
            const exits = await exitsConnection.json();

            const tudo = [...entries, ...exits];
            console.log(tudo)

            tudo.sort((a, b) => new Date(a.date) - new Date(b.date));

            tudo.forEach(transacao => {
                const tipo = transacao.type;
                const motivo = transacao.cause;
                const valor = transacao.value?.$numberDecimal || transacao.value;
                const data = transacao.date;
                const id = transacao._id;

                geraTransacao({ tipo, motivo, valor, data, id });
            });
        }


        async function pushDates(params) {
            const totalEntriesConnection = await fetch(`${url}/balance/entrie`)
            const totalEntries = await totalEntriesConnection.json();

            const totalExitsConnection = await fetch(`${url}/balance/exit`)
            const totalExits = await totalExitsConnection.json();

            const balanceConnection = await fetch(`${url}/balance`)
            const balance = await balanceConnection.json();

            let entries = document.getElementById("div_total_entries");
            let exits = document.getElementById("div_total_exits");
            let balances = document.getElementById("div_balance");

            entries.innerText = `R$ ${totalEntries.total}`;
            exits.innerText = `R$ ${totalExits.total}`;
            balances.innerText = `R$ ${balance.balance}`;
        }

        window.addEventListener('load', async () => {
            await listagem();
            await pushDates();
        });
    </script>
</body>

</html>